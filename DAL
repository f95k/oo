
package uppgift1;
import java.awt.BorderLayout;
import java.sql.*;
import java.util.*;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;

public class DAL {
    private Kurs kurs;
    private String kursnamn;
    private int poang;
    private int poang1;
    private int poang2;
    private Laser laser;
    private Last last;
    private String sNamn;
    private String sAdress;
    private String sqlString;
    private String sqlString1;
    private GUI gui;
    
    public Student getStudent(String sPnr) throws SQLException {
        Connection conn = Connector.startConnection();
        sqlString = "SELECT * FROM Student WHERE sPnr = '" + sPnr + "'";
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(sqlString);
        rs.next();
        sPnr = rs.getString(1);
        sNamn = rs.getString(2);
        sAdress = rs.getString(3);
        
        Student student = new Student(sPnr, sNamn, sAdress);
        return student;
        
    }
    
    public void getStudentTable(String sPnr) throws SQLException {
        Connection conn = Connector.startConnection();
        Statement st = null;
        ResultSet rs = null;
        String s;
        
        try {
            st = conn.createStatement();
            s = "SELECT * FROM Student WHERE sPnr = '" + sPnr + "'";
            rs = st.executeQuery(s);
            ResultSetMetaData rsmt = rs.getMetaData();
            int c = rsmt.getColumnCount();
            Vector column = new Vector(c);
            for(int i = 1; i <= c; i++) {
                column.add(rsmt.getColumnName(i));
            }
            Vector data = new Vector();
            Vector row = new Vector();
            while(rs.next()) {
                row = new Vector(c);
                for(int i = 1; i <= c; i++) {
                    row.add(rs.getString(i));
                }
                data.add(row);
            }
            
            JFrame frame = new JFrame();
            frame.setSize(500,120);
            frame.setLocationRelativeTo(null);
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            JPanel panel  = new JPanel();
            JTable table = new JTable(data, column);
            JScrollPane jsp = new JScrollPane(table);
            panel.setLayout(new BorderLayout());
            panel.add(jsp,BorderLayout.CENTER);
            frame.setContentPane(panel);
            frame.setVisible(true);
            
            
            
            
        } catch (Exception e) {
            
        } finally {
            try {
                st.close();
                rs.close();
                conn.close();
                
                
            } catch (Exception e) {
                
            }
        }
      
    }
    
    public Kurs getKurs(String kurskod) throws SQLException{
        Connection conn = Connector.startConnection();
        sqlString = "SELECT * FROM Kurs WHERE kurskod = '" + kurskod + "'";
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(sqlString); 
        rs.next(); 
        kurskod = rs.getString(1); 
        kursnamn = rs.getString(2); 
        poang = rs.getInt(3); 
        kurs = new Kurs(kurskod, kursnamn, poang); 
        return kurs;
        
    }
    
      public void getKursBetygTable(String kurskod, String termin) throws SQLException {
        Connection conn = Connector.startConnection();
        Statement st = null;
        ResultSet rs = null;
        String s;
        
        try {
            st = conn.createStatement();
            s =  "SELECT h.sPnr, s.sNamn, h.betyg FROM Last h JOIN Student s " + "ON h.sPnr = s.sPnr "
                    + "WHERE h.kurskod = '" + kurskod + "' and h.termin = '" + termin + "'";
            rs = st.executeQuery(s);
            ResultSetMetaData rsmt = rs.getMetaData();
            int c = rsmt.getColumnCount();
            Vector column = new Vector(c);
            for(int i = 1; i <= c; i++) {
                column.add(rsmt.getColumnName(i));
            }
            Vector data = new Vector();
            Vector row = new Vector();
            while(rs.next()) {
                row = new Vector(c);
                for(int i = 1; i <= c; i++) {
                    row.add(rs.getString(i));
                }
                data.add(row);
            }
            
            JFrame frame = new JFrame();
            frame.setSize(500,120);
            frame.setLocationRelativeTo(null);
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            JPanel panel  = new JPanel();
            JTable table = new JTable(data, column);
            JScrollPane jsp = new JScrollPane(table);
            panel.setLayout(new BorderLayout());
            panel.add(jsp,BorderLayout.CENTER);
            frame.setContentPane(panel);
            frame.setVisible(true);
            
            
            
            
        } catch (Exception e) {
            
        } finally {
            try {
                st.close();
                rs.close();
                conn.close();
                
                
            } catch (Exception e) {
                
            }
        }
      
    }
    
       public void getKursTable(String kurskod) throws SQLException {
        Connection conn = Connector.startConnection();
        Statement st = null;
        ResultSet rs = null;
        String s;
        
        try {
            st = conn.createStatement();
            s = "SELECT * FROM Kurs WHERE kurskod = '" + kurskod + "'";
            rs = st.executeQuery(s);
            ResultSetMetaData rsmt = rs.getMetaData();
            int c = rsmt.getColumnCount();
            Vector column = new Vector(c);
            for(int i = 1; i <= c; i++) {
                column.add(rsmt.getColumnName(i));
            }
            Vector data = new Vector();
            Vector row = new Vector();
            while(rs.next()) {
                row = new Vector(c);
                for(int i = 1; i <= c; i++) {
                    row.add(rs.getString(i));
                }
                data.add(row);
            }
            
            JFrame frame = new JFrame();
            frame.setSize(500,120);
            frame.setLocationRelativeTo(null);
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            JPanel panel  = new JPanel();
            JTable table = new JTable(data, column);
            JScrollPane jsp = new JScrollPane(table);
            panel.setLayout(new BorderLayout());
            panel.add(jsp,BorderLayout.CENTER);
            frame.setContentPane(panel);
            frame.setVisible(true);
            
            
            
            
        } catch (Exception e) {
            
        } finally {
            try {
                st.close();
                rs.close();
                conn.close();
                
                
            } catch (Exception e) {
                
            }
        }
      
    }
 
       public void getStudentLaserTable(String sPnr) throws SQLException {
        Connection conn = Connector.startConnection();
        Statement st = null;
        ResultSet rs = null;
        String s;
        
        try {
            st = conn.createStatement();
            s = "SELECT * FROM Laser WHERE sPnr = '" + sPnr + "'";
            rs = st.executeQuery(s);
            ResultSetMetaData rsmt = rs.getMetaData();
            int c = rsmt.getColumnCount();
            Vector column = new Vector(c);
            for(int i = 1; i <= c; i++) {
                column.add(rsmt.getColumnName(i));
            }
            Vector data = new Vector();
            Vector row = new Vector();
            while(rs.next()) {
                row = new Vector(c);
                for(int i = 1; i <= c; i++) {
                    row.add(rs.getString(i));
                }
                data.add(row);
            }
            
            JFrame frame = new JFrame();
            frame.setSize(500,120);
            frame.setLocationRelativeTo(null);
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            JPanel panel  = new JPanel();
            JTable table = new JTable(data, column);
            JScrollPane jsp = new JScrollPane(table);
            panel.setLayout(new BorderLayout());
            panel.add(jsp,BorderLayout.CENTER);
            frame.setContentPane(panel);
            frame.setVisible(true);
            
            
            
            
        } catch (Exception e) {
            
        } finally {
            try {
                st.close();
                rs.close();
                conn.close();
                
                
            } catch (Exception e) {
                
            }
        }
      
    }
       
       public void getStudentLastTable(String sPnr) throws SQLException {
        Connection conn = Connector.startConnection();
        Statement st = null;
        ResultSet rs = null;
        String s;
        
        try {
            st = conn.createStatement();
            s = "SELECT * FROM Last WHERE sPnr = '" + sPnr + "'";
            rs = st.executeQuery(s);
            ResultSetMetaData rsmt = rs.getMetaData();
            int c = rsmt.getColumnCount();
            Vector column = new Vector(c);
            for(int i = 1; i <= c; i++) {
                column.add(rsmt.getColumnName(i));
            }
            Vector data = new Vector();
            Vector row = new Vector();
            while(rs.next()) {
                row = new Vector(c);
                for(int i = 1; i <= c; i++) {
                    row.add(rs.getString(i));
                }
                data.add(row);
            }
            
            JFrame frame = new JFrame();
            frame.setSize(500,120);
            frame.setLocationRelativeTo(null);
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            JPanel panel  = new JPanel();
            JTable table = new JTable(data, column);
            JScrollPane jsp = new JScrollPane(table);
            panel.setLayout(new BorderLayout());
            panel.add(jsp,BorderLayout.CENTER);
            frame.setContentPane(panel);
            frame.setVisible(true);
            
            
            
            
        } catch (Exception e) {
            
        } finally {
            try {
                st.close();
                rs.close();
                conn.close();
                
                
            } catch (Exception e) {
                
            }
        }
      
    }
    
    // Hitta resultatet för en angiven student på en angiven kurs.
	public ArrayList<Last> getKursBetyg(String sPnr, String kurskod) throws SQLException {
		ArrayList<Last> lastList = new ArrayList<Last>();

		Connection conn = Connector.startConnection();

		sqlString = "SELECT sPnr, kurskod, betyg FROM Last WHERE sPnr = '" + sPnr + "' and kurskod = '" + kurskod + "'";

		Statement stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery(sqlString);
		while (rs.next()) {
                     Last l1 = new Last(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4));
		     lastList.add(last);
		}

		return lastList;
	}
        
        public void getLastTable(String sPnr, String kurskod) throws SQLException {
        Connection conn = Connector.startConnection();
        Statement st = null;
        ResultSet rs = null;
        String s;
        
        try {
            st = conn.createStatement();
            s = "SELECT sPnr, kurskod, termin, betyg FROM Last WHERE sPnr = '" + sPnr + "' and kurskod = '" + kurskod + "'";
            rs = st.executeQuery(s);
            ResultSetMetaData rsmt = rs.getMetaData();
            int c = rsmt.getColumnCount();
            Vector column = new Vector(c);
            for(int i = 1; i <= c; i++) {
                column.add(rsmt.getColumnName(i));
            }
            Vector data = new Vector();
            Vector row = new Vector();
            while(rs.next()) {
                row = new Vector(c);
                for(int i = 1; i <= c; i++) {
                    row.add(rs.getString(i));
                }
                data.add(row);
            }
            
            JFrame frame = new JFrame();
            frame.setSize(500,120);
            frame.setLocationRelativeTo(null);
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            JPanel panel  = new JPanel();
            JTable table = new JTable(data, column);
            JScrollPane jsp = new JScrollPane(table);
            panel.setLayout(new BorderLayout());
            panel.add(jsp,BorderLayout.CENTER);
            frame.setContentPane(panel);
            frame.setVisible(true);
            
            
            
            
        } catch (Exception e) {
            
        } finally {
            try {
                st.close();
                rs.close();
                conn.close();
                
                
            } catch (Exception e) {
                
            }
        }
      
    }
        
        public void getLaserTable(String kurskod, String termin) throws SQLException {
        Connection conn = Connector.startConnection();
        Statement st = null;
        ResultSet rs = null;
        String s;
        
        try {
            st = conn.createStatement();
            s = "SELECT s.sPnr, s.sNamn, s.sAdress FROM Laser r INNER JOIN Student s ON r.sPnr = s.sPnr "
				+ "WHERE r.kurskod = '" + kurskod + "' and r.termin = '" + termin + "'";
            rs = st.executeQuery(s);
            ResultSetMetaData rsmt = rs.getMetaData();
            int c = rsmt.getColumnCount();
            Vector column = new Vector(c);
            for(int i = 1; i <= c; i++) {
                column.add(rsmt.getColumnName(i));
            }
            Vector data = new Vector();
            Vector row = new Vector();
            while(rs.next()) {
                row = new Vector(c);
                for(int i = 1; i <= c; i++) {
                    row.add(rs.getString(i));
                }
                data.add(row);
            }
            
            JFrame frame = new JFrame();
            frame.setSize(500,120);
            frame.setLocationRelativeTo(null);
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            JPanel panel  = new JPanel();
            JTable table = new JTable(data, column);
            JScrollPane jsp = new JScrollPane(table);
            panel.setLayout(new BorderLayout());
            panel.add(jsp,BorderLayout.CENTER);
            frame.setContentPane(panel);
            frame.setVisible(true);
            
            
            
            
        } catch (Exception e) {
            
        } finally {
            try {
                st.close();
                rs.close();
                conn.close();
                
                
            } catch (Exception e) {
                
            }
        }
      
    }
        
        
        // Hämtar alla kurser
	public ArrayList<Kurs> getAllKurser() throws SQLException {
		ArrayList<Kurs> kursList = new ArrayList<Kurs>();

		Connection conn = Connector.startConnection();

		sqlString = "SELECT * FROM Kurs";

		Statement stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery(sqlString);

		while (rs.next()) {
			kurs= new Kurs(rs.getString(1), rs.getString(2), rs.getInt(3));
			kursList.add(kurs);
		}

		return kursList;
	}
        
        // Visa resultat för angiven kurs (Alla studenter som tagit kursen och deras betyg)
	public ArrayList<Student> getBetygList(String kurskod, String termin) throws SQLException {

		ArrayList<Student> studentList = new ArrayList<Student>();

		Connection conn = Connector.startConnection();

		sqlString = "SELECT h.sPnr, s.sNamn, h.betyg FROM Last h JOIN Student s "
				+ "ON h.ssid = s.ssid WHERE h.ccode = '"
				+ kurskod+ "'";

		Statement stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery(sqlString);

		while (rs.next()) {
                    Student student = new Student(rs.getString(1), rs.getString(2),
                            rs.getString(3));
			studentList.add(student);
		}

		return studentList;
	}
        
        // Hittar alla kurser EN student läser.
	public ArrayList<Laser> getStudentsKurs(String sPnr) throws SQLException {
		
		ArrayList<Laser> kursList = new ArrayList<Laser>();

		Connection con = Connector.startConnection();
		sqlString = "SELECT k.kurskod, k.kursnamn, r.termin FROM Laser r " + "INNER JOIN Kurs k " + "ON r.kurskod = k.ccode  " + "WHERE sPnr = '" + sPnr + "'";
		
		Statement stmt = con.createStatement();
		ResultSet rs = stmt.executeQuery(sqlString);

		while (rs.next()) {
			laser = new Laser(rs.getString(1), rs.getString(2),
					rs.getString(3));
			kursList.add(laser);

		}
		
		return kursList;
	}
        
        // Registrering av Student
	public void addStudent(String sPnr, String sNamn, String sAddress) throws SQLException {

		Connection conn = Connector.startConnection();

		Statement stmt = conn.createStatement();
		
		String sqlString = "INSERT INTO Student VALUES ('" + sPnr + "', '" + sNamn + "', '" + sAddress + "');";
		
		stmt.executeUpdate(sqlString);
		stmt.close();

	}
        
        // Registrering av Kurs
	public void addKurs(String kurskod, String kursnamn, int poang) throws SQLException {
		
		Connection conn = Connector.startConnection();

		Statement stmt = conn.createStatement();
		String sqlString = "INSERT INTO Kurs VALUES ('" + kurskod + "', '" + kursnamn + "', '" + poang + "')";
		stmt.executeUpdate(sqlString);
		stmt.close();

	}
        
        public boolean checkStudentKurs(String sPnr, String kurskod) throws SQLException {

		Connection conn = Connector.startConnection();
		
		sqlString = "SELECT COUNT(*) FROM Last WHERE sPnr = '" + sPnr + "' and kurskod = '" + kurskod + "' and betyg != 'F'";
		Statement stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery(sqlString);
		rs.next();

		if (rs.getInt(1) != 0) {
			return false;
		} else {
			return true;
		}
	}
        
      
        
        public void addStudentLaser(String sPnr, String kurskod, String termin) throws SQLException {
            if(getTotalPoang(sPnr, termin) < 45) {
            Connection conn = Connector.startConnection();
            Statement stmt = conn.createStatement();
            String sqlString = "INSERT INTO Laser VALUES ('" + sPnr + "', '" + kurskod + "', '" + termin + "')";
            stmt.executeUpdate(sqlString);
            stmt.close();
            } else {                
                System.out.println("Får ej överskrida 45p");
                JOptionPane.showMessageDialog(null,
					    "Får ej överskrida 45p / termin!",
					    "FEL!!!!",
					    JOptionPane.INFORMATION_MESSAGE);
                return;
				
            }
        }
        
  
	// Registrering av avslutad kurs (Har läst)
	public void addStudentLast(String sPnr, String kurskod, String termin, String betyg) throws SQLException {

		Connection conn = Connector.startConnection();

		Statement stmt = conn.createStatement();
		String sqlQuery = "INSERT INTO Last VALUES ('" + sPnr + "', '" + kurskod + "', '" + termin + "', '" + betyg + "')";
		stmt.executeUpdate(sqlQuery);
		stmt.close();

		//Tar bort studenten från studying i databasen
		removeStudentFromLaser(sPnr, kurskod);

	}
        
        
	 /**
	  * ************** Specialmetoder (A-B) *****************
	  */
	
	//Checkar om studenten har läst kursen på samma termin
	public boolean checkStudentTermin(String sPnr, String kurskod, String termin) throws SQLException{
		Connection conn = Connector.startConnection();

		sqlString = "SELECT COUNT(*) FROM Last WHERE sPnr = '" + sPnr + "' AND kurskod = '" + kurskod + "' AND termin = '" + termin + "'";
		Statement stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery(sqlString);
		rs.next();

		if (rs.getInt(1) != 0) {
			return false;
		} else {
			return true;
		}
		
		
	}
        
        
        
        	// Räknar ut totala antalet hp-poäng för en student
	public int getTotalPoang(String sPnr, String termin) throws SQLException {

		Connection conn = Connector.startConnection();
		
		//Hämtar poängen från studied (läst)
		String sqlString = "SELECT SUM(k.poang) FROM Kurs k WHERE k.kurskod " + "IN (SELECT h.kurskod FROM Last h WHERE h.sPnr = '" + sPnr + "' AND h.termin = '" + termin + "')";

		Statement stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery(sqlString);
		poang1 = 0;

		while (rs.next()) {
			poang1 = rs.getInt(1);
		}
                
                
                	//Hämtar poängen från  läser
		String sqlString1 = "SELECT SUM(p.poang) FROM Kurs p WHERE p.kurskod " + "IN (SELECT h.kurskod FROM Laser h WHERE h.sPnr = '" + sPnr + "' AND h.termin = '" + termin + "')";

		Statement stmt1 = conn.createStatement();
		ResultSet rs1 = stmt1.executeQuery(sqlString1);
		poang2 = 0;

		while (rs1.next()) {
			poang2 = rs1.getInt(1);
		}
		
		//Lägger ihop poängen studied + studying
		poang = (poang1 + poang2);

		return poang;
	}
        
        	// Hitta samtliga studenter som inte är klara med en angiven kurs
	public ArrayList<Student> getAllStudentReadingKurs(String kurskod, String termin) throws SQLException {

		ArrayList<Student> studentList = new ArrayList<Student>();

		Connection conn = Connector.startConnection();

		sqlString = "SELECT s.sPnr, s.sNamn, s.sAdress FROM Laser r INNER JOIN Student s ON r.sPnr = s.sPnr "
				+ "WHERE r.kurskod = '" + kurskod + "' and r.termin = '" + termin + "'";

		Statement stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery(sqlString);

		while (rs.next()) {
                    Student student = new Student(rs.getString(1), rs.getString(2), rs.getString(3));
			studentList.add(student);
		}

		return studentList;
	}
        
        // Visa procentantalet studenter som fått A på en angiven kurs.
	public String getPercentageGradeA(String kurskod, String termin) throws SQLException {

		String percent = new String();

		Connection conn = Connector.startConnection();

		sqlString = "SELECT betyg, (COUNT(betyg)* 100 / (SELECT COUNT(*) FROM Last WHERE kurskod='"
				+ kurskod
				+ "')) AS ScorePercentage"
				+ " FROM Last GROUP BY kurskod, betyg , termin "
				+ "HAVING kurskod='"
				+ kurskod
				+ "' and termin ='"
				+ termin
				+ "' AND betyg='A'";

		Statement stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery(sqlString);

		while (rs.next()) {
			percent = rs.getString(2);
		}

		return percent;
	}
        
        //Genomströmning
	public void getStudentFlow() throws SQLException {
             Connection conn = Connector.startConnection();
             Statement st = null;
             ResultSet rs = null;
             String s;
	
                
           try {
            st = conn.createStatement();
            s = "Select distinct( kurskod ), count( distinct(sPnr) ) From Last WHERE kurskod in (SELECT kurskod FROM Last HAVING betyg <> 'F'";
            rs = st.executeQuery(s);
            ResultSetMetaData rsmt = rs.getMetaData();
            int c = rsmt.getColumnCount();
            Vector column = new Vector(c);
            for(int i = 1; i <= c; i++) {
                column.add(rsmt.getColumnName(i));
            }
            Vector data = new Vector();
            Vector row = new Vector();
            while(rs.next()) {
                row = new Vector(c);
                for(int i = 1; i <= c; i++) {
                    row.add(rs.getString(i));
                }
                data.add(row);
            }
            
            JFrame frame = new JFrame();
            frame.setSize(500,120);
            frame.setLocationRelativeTo(null);
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            JPanel panel  = new JPanel();
            JTable table = new JTable(data, column);
            JScrollPane jsp = new JScrollPane(table);
            panel.setLayout(new BorderLayout());
            panel.add(jsp,BorderLayout.CENTER);
            frame.setContentPane(panel);
            frame.setVisible(true);
            
            
            
            
        } catch (Exception e) {
            
        } finally {
            try {
                st.close();
                rs.close();
                conn.close();
                
                
            } catch (Exception e) {
                
            }
           }
        }
      
        
        
         /**
	  * ************** Borttagningsmetoder *****************
	  */

	// Delete student
	public void deleteStudent(String sPnr) throws SQLException {

		Connection conn = Connector.startConnection();

		String sqlString = "DELETE FROM Student WHERE sPnr = '" + sPnr + "'";
		
		Statement stmt = conn.createStatement();
		stmt.executeUpdate(sqlString);
		conn.close();
	}
        
        // Delete kurs
	public void deleteCourse(String kurskod) throws SQLException {
		
		Connection conn = Connector.startConnection();

		String sqlString = "DELETE FROM Kurs WHERE kurskod = '" + kurskod + "'";
		
		Statement stmt = conn.createStatement();
		stmt.executeUpdate(sqlString);
		conn.close();
	}
        
        // Ta bort student från kurs
	public void removeStudentFromLaser(String sPnr, String kurskod) throws SQLException {
		
		Connection conn = Connector.startConnection();

		String sqlString = "DELETE FROM Laser WHERE sPnr = '" + sPnr
				+ "' AND kurskod = '" + kurskod + "'";
		
		Statement stmt = conn.createStatement();
		stmt.executeUpdate(sqlString);
		conn.close();
	}
        
        
        	public String highestFlow() throws SQLException {
                Connection conn = Connector.startConnection();
		String sql = "select kurskod,count(*) from Last group by kurskod order by 2 desc";
		PreparedStatement stmt = conn.prepareStatement(sql);
		String highestCourseCode = null;
		String courseName = null;

		ResultSet rs = stmt.executeQuery();
		rs.next();
		try {
			highestCourseCode = rs.getString(1);
		} catch (SQLException e) {
			JOptionPane
					.showMessageDialog(null,
							"Cannot get course with highest flow right now. Try updating your courses");
		}
		rs.close();
		stmt.close();

		courseName = getKurs(highestCourseCode).getKursnamn();
		return courseName;
                
              
	}
}

        
        
        
        
        
        
        

        
        

    
    

